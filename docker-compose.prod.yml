version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: herbario_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: herbario
      POSTGRES_USER: herbario_app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/src/database/auth_setup_and_create_admin.sql:/docker-entrypoint-initdb.d/02-auth.sql
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - herbario_network
    # Configuración optimizada para VPS limitado
    command: [
      "postgres",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=2GB",
      "-c", "max_worker_processes=2",
      "-c", "max_parallel_workers_per_gather=1",
      "-c", "max_parallel_workers=2",
      "-c", "max_connections=50"
    ]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U herbario_app -d herbario"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: herbario_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: herbario
      DB_USER: herbario_app
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "127.0.0.1:3001:3001"
    networks:
      - herbario_network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: herbario_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/herbario.conf:/etc/nginx/conf.d/default.conf
      - ./frontend:/var/www/herbario/frontend:ro
      - uploads_data:/var/www/herbario/uploads:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - herbario_network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache (opcional, solo si hay recursos suficientes)
  redis:
    image: redis:7-alpine
    container_name: herbario_redis
    restart: unless-stopped
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - herbario_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache # Solo activar si hay recursos suficientes

  # Servicio de backup
  backup:
    image: postgres:15-alpine
    container_name: herbario_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - herbario_network
    depends_on:
      - postgres
    command: ["/backup.sh"]
    profiles:
      - backup # Solo ejecutar manualmente

  # Monitoreo básico con Watchtower
  watchtower:
    image: containrrr/watchtower
    container_name: herbario_watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 86400 # 24 horas
      WATCHTOWER_INCLUDE_STOPPED: true
      WATCHTOWER_REVIVE_STOPPED: false
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    profiles:
      - monitoring # Opcional

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  herbario_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16